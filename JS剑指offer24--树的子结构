# `JS`剑指*offer*24--树的子结构

> 在看了力扣很多大佬建议做这道题之前先用**题号100.相同的树**作为开胃菜进行练习后决定在这里给整上

## 100.相同的树

> 给定两个二叉树，编写一个函数来检验它们是否相同。
>
> 如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。
>
> 示例 1:
>
> 输入:       
>
> ```
> 	1         1
>    / \       / \
>   2   3     2   3
>  [1,2,3],   [1,2,3]
> ```
>
> 输出: `true`
> 示例 2:
>
> 输入:  
>
> ```
>  	 1          1
> 	 /           \
>     2             2
>    [1,2],     [1,null,2]
> ```
>
> 输出: `false`
> 示例 3:
>
> 输入:      
>
> ```
>  	1         1
>    / \       / \
>   2   1     1   2
>  [1,2,1],   [1,1,2]
> ```
>
> 输出: `false`
>
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/same-tree
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

递归法

```js
/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} p
 * @param {TreeNode} q
 * @return {boolean}
 */
var isSameTree = function(p, q) {
    if(p == null && q == null) return true
    if(p == null || q == null) return false
    if(p.val !== q.val) return false
    return isSameTree(p.left, q.left) && isSameTree(p.right, q.right)
};
```

剑指offer这个题其实更像是这道题的扩展，接下来我们就来康康这道题

> 输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)
>
> B是A的子结构， 即 A中有出现和B相同的结构和节点值。
>
> 例如:
> 给定的树 A:
>
>     	 3
>     	/ \
>        4   5
>       / \
>      1   2
> 给定的树 B：
>
> ```
>    4 
>   /
>  1
> ```
>
> 返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。
>
> 示例 1：
>
> ```
> 输入：A = [1,2,3], B = [3,1]
> 输出：false
> ```
>
>
> 示例 2：
>
> ```
> 输入：A = [3,4,5,1,2], B = [4,1]
> 输出：true
> ```
>
> 限制：
>
> 0 <= 节点个数 <= 10000
>
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

- 解题思路

  - 判断是不是子树，同时传`A.left` `B.left`
  - 如果B是A的子树
  - 要么从A开始 B是子树
  - 要么B是A左子树的子结构
  - 要么B是A右子树的子结构

- 代码

  ```js
  /**
   * Definition for a binary tree node.
   * function TreeNode(val) {
   *     this.val = val;
   *     this.left = this.right = null;
   * }
   */
  /**
   * @param {TreeNode} A
   * @param {TreeNode} B
   * @return {boolean}
   */
  var isSubStructure = function(A, B) {
      if(!B || !A) return false
      return find(A, B) || isSubStructure(A.left, B) || isSubStructure(A.right, B)
  };
  
  function find(A, B) {
      if(!B) return true
      if(!A || A.val != B.val) return false
      return find(A.left, B.left) && find(A.right , B.right)
  }
  ```

  